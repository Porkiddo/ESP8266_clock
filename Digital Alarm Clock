#include <ESP8266WiFi.h>
#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Max72xxPanel.h>
#include <NTPtimeESP.h> 
#include <DHT.h>

#define DHTTYPE DHT11 
#define SSID "******"                      // Home SSID
#define PASS "******"                      // HOME PASS
//#define SSID "******"             // WORK
//#define PASS "******"                    // WORK

long period;
int offset=1,refresh=0;
int pinCS = D3; // Attach CS to this pin, DIN to MOSI and CLK to SCK (cf http://arduino.cc/en/Reference/SPI )
int numberOfHorizontalDisplays = 4;
int numberOfVerticalDisplays = 1;
int rotation = 3;                               // Rotation of the matrix. 0-4

Max72xxPanel matrix = Max72xxPanel(pinCS, numberOfHorizontalDisplays, numberOfVerticalDisplays);

int DHTPin = D2;                                // Temp/Hum sensor
int button1 = D4, button2 = D6;
int sensor = A0;                                // Light Sensor
int buzzer = D1;

int light = 0;                                  // Sensor variable                              
int setInt = 0, newInt = 0;                     // Intensity variable to screens
int temp, hum;                                  // DHT variables

int clockArray[5]={0,8,13,19,27};               // Position on the matrix for the 5 elements
int tempArray[3]={9,16,24};                     // Position on the matrix for 3 elements
int spacer = 2, width = 5 + spacer;             // The font width is 5 pixels
int wait = 75;                                  // Scroll speed in milliseconds
int h = 0, m = 0;                               // Alarm variables
int alarmState = LOW;

String decodedMsg, hour, alarmHour, alarmStatus, alarmH, alarmM;
String actualHour, actualMinute, actualyear, actualMonth, actualday ,actualdayofWeek;
float button1HeldTime = 0, button2HeldTime = 0;  // Counts the time when button pressed

static char celsiusTemp[7], humidityTemp[7];
unsigned long previousMillis = 0, spreviousMillis = 0, tpreviousMillis = 0, apreviousMillis = 0;
long FastUpdate = 500, SlowUpdate = 60000;
char myIP[16];

DHT dht(DHTPin, DHTTYPE);                  // Temp/Hum
NTPtime NTPch("gb.pool.ntp.org");          // NTP Great Britain Poool

strDateTime dateTime;

void getNTPtime(){   
   dateTime = NTPch.getNTPtime(0, 1);      // first parameter: Time zone in floating point (for India); second parameter: 1 for European summer time
   NTPch.printDateTime(dateTime);
    
   String actualHour      = String (dateTime.hour);
   String actualMinute    = String (dateTime.minute);
   String actualsecond    = String (dateTime.second);
   String actualyear      = String (dateTime.year);
   String actualMonth     = String (dateTime.month);
   String actualday       = String (dateTime.day);
   int actualdayofWeek    = int (dateTime.dayofWeek);

   if (actualMinute.length() < 2){                // actualMinute only shows one digit when < 10
    actualMinute = "0" + actualMinute;              
   }
   if (actualHour.length() < 2){
    actualHour = "0" + actualHour;   
   }
   hour = actualHour + ":" + actualMinute;   
}

void clockToMatrix(){
    int index=0;
    matrix.fillScreen(LOW);
    for(index=0;index<=4;index++){
    matrix.drawChar(clockArray[index], 1, hour[index], HIGH, LOW, 1);
    }
    matrix.write();
    delay(100);   
}

void scroll(){
    for ( int i = 0 ; i < width * decodedMsg.length() + matrix.width() - spacer; i++ ) {
   
    matrix.fillScreen(LOW);
    
    int letter = i / width;
    int x = (matrix.width() - 1) - i % width;
    int y = (matrix.height() - 8) / 2; // center the text vertically 

    while ( x + width - spacer >= 0 && letter >= 0 ) {
      if ( letter < decodedMsg.length() ) {
        matrix.drawChar(x, y, decodedMsg[letter], HIGH, LOW, 1);
      }
      letter--;
      x -= width;
    }
    matrix.write(); // Send bitmap to display
    delay(wait);
  }
}

void dhtTemp(){
  float h = dht.readHumidity();
            float t = dht.readTemperature();           // Read temperature as Celsius (the default)           
            if (isnan(h) || isnan(t)) {                // Check if any reads failed and exit early (to try again).
              Serial.println("Failed to read from DHT sensor!");
              strcpy(celsiusTemp,"Failed");
              strcpy(humidityTemp, "Failed");
              temp = 0;
              hum = 0;         
            }
            else{
              float hic = dht.computeHeatIndex(t, h, false);  // Computes temperature values in Celsius + Fahrenheit and Humidity 
              dtostrf(hic, 6, 2, celsiusTemp);             
              temp = t;
              hum = h;
            }
}
void dhtTempprint(){

   String tempReading = String(temp) + "C";      
   if (tempReading.length() <3){                 // dhtReading1 Formating
     tempReading = " " + tempReading;              
   }
   String humReading = String(hum) + "%";    
   if (humReading.length() <3){                 // dhtReading2 Formating
    humReading = " " + humReading;              
   }    
   matrix.fillScreen(LOW);
   for (int i=0; i<=2; i++){
    matrix.drawChar(tempArray[i], 1, tempReading[i], HIGH, LOW, 1);
    matrix.write();
   }
   delay(2000);
   matrix.fillScreen(LOW);
   for (int i=0; i<=2; i++){
    matrix.drawChar(tempArray[i], 1, humReading[i], HIGH, LOW, 1);
    matrix.write();
   }
   delay(2000);
}

void alarm(){
    while (apreviousMillis < 2000){
      if (digitalRead(button1)==LOW){    
          apreviousMillis = 0;
          if(h < 23){
             h = h + 1;
          }
          else{ h = 0;}
          alarmH = h; 
          alarmM = m;
          if (alarmH.length() < 2){
            alarmH = "0" + alarmH;
          }
          if (alarmM.length() < 2){
            alarmM = "0" + alarmM;
          }
          alarmHour = alarmH + (":") + alarmM;
          int index=0;
          matrix.fillScreen(LOW);
          for(index=0;index<=4;index++){
          matrix.drawChar(clockArray[index], 1, alarmHour[index], HIGH, LOW, 1);
          }
          matrix.write();
          delay(100);
      }
      if (digitalRead(button2)==LOW){
          apreviousMillis = 0;
          if (m < 59){         
          m = m + 1;
          }
          else{ m = 0;}
          alarmH = h;
          alarmM = m;
          if (alarmH.length() < 2){
            alarmH = "0" + alarmH;
          }
          if (alarmM.length() < 2){
            alarmM = "0" + alarmM;
          }
          alarmHour = alarmH + (":") + alarmM;
          int index=0;
          matrix.fillScreen(LOW);
          for(index=0;index<=4;index++){
          matrix.drawChar(clockArray[index], 1, alarmHour[index], HIGH, LOW, 1);
          }
          matrix.write();
          delay(100);      
      }    
    delay(100);
    apreviousMillis = apreviousMillis + 100;    
    }
   apreviousMillis = 0;
}

void alarmBuzzer(){
    
    if ((alarmHour == hour) && (alarmState == HIGH)){      
      matrix.fillScreen(LOW);
      tone(buzzer, 1000, 100);                // Send 1KHz sound signal for 100ms
      delay(100);                
      tone(buzzer, 1000, 100);
      delay(100);         
      tone(buzzer, 1000, 100);
      delay(100);        
      matrix.write();
      delay(1000);
                 
    }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setup(void) {
  
  pinMode(button1, INPUT_PULLUP);
  pinMode(button2, INPUT_PULLUP);
  pinMode(sensor, INPUT);
  pinMode(buzzer, OUTPUT);
  
  dht.begin();                                          // Start Temp/Hum sensor
  
  matrix.setIntensity(4);                               // Use a value between 0 and 15 for brightness
  matrix.fillScreen(LOW);                               // Clear the display
  
  for (int i=0; i<=numberOfHorizontalDisplays; i++){    // Rotate displays
    matrix.setRotation(i,rotation);
  }
  matrix.setPosition(0,3,0); // Set position of display (byte display,byte x,byte y)
  matrix.setPosition(1,2,0); // The second display is at <1, 2>
  matrix.setPosition(2,1,0); // The third display is at <2, 1>  
  matrix.setPosition(3,0,0); // And the last display is at <3, 0>

  Serial.begin(115200);                           // full speed to monitor
                               
  WiFi.begin(SSID, PASS);                         // Connect to WiFi network
  while (WiFi.status() != WL_CONNECTED) {         // Wait for connection
    delay(500);
    Serial.println(".");
    decodedMsg = "Connecting";
    scroll();    
  }
  delay(2000);

  Serial.print("SSID: ");                         // prints SSID in monitor
  Serial.println(SSID);                           // to monitor             
   
  sprintf(myIP, "%3d.%3d.%1d.%3d", WiFi.localIP()[0], WiFi.localIP()[1], WiFi.localIP()[2], WiFi.localIP()[3]);
  decodedMsg = myIP;
  Serial.println(WiFi.localIP());                 // Serial monitor prints localIP  
  scroll();
  delay(1000);

// Get NTP Time
 getNTPtime();
 delay(1000);
// Get DHT Values
 dhtTemp();
 delay(1000);
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void loop(void) {

  unsigned long currentMillis = millis();
  unsigned long scurrentMillis = millis();             // Counter for light sensor
  unsigned long tcurrentMillis = millis();
 
// DHT temperature and humidity functions
     if (tcurrentMillis - tpreviousMillis >= 50000){
      dhtTemp();
      tpreviousMillis = tcurrentMillis;

    }
      
// Light Sensor functions
   if (scurrentMillis - spreviousMillis >= 500){
      light = analogRead(A0);                          // Read Photoresistor level
      light = map(light, 0,1023,0,10);                 // Change Values to handle
      newInt = 10-light;                               // New Intensity -10 sets the new Int to matrix 1-Low 15-Full
      if (newInt < setInt){                            // Read the changes and set intensity
         for (int x = setInt ; newInt < setInt ; x--){
         setInt = newInt;
       }}
       if (newInt > setInt){
          for(int x = setInt ; newInt > setInt ; x++){
          setInt=newInt;        
       }}
        else{ setInt = newInt;
        }        
        matrix.setIntensity(setInt);                   // Apply intensity changes to matrix
        spreviousMillis = scurrentMillis; 
    } 
     
// Get the NTP Functions
  if (currentMillis - previousMillis >= SlowUpdate){
     getNTPtime();
     previousMillis = currentMillis; 
  }
  
// Show clock on matrix
   clockToMatrix();
   delay(100);
   
// Button 1 Functions
  while (digitalRead(button1)==LOW && button1HeldTime<1000){
    delay(100);
    button1HeldTime = button1HeldTime + 100;
}
  // Show Date with Button 1 Long Press  
  if (button1HeldTime >= 1000){
    String dayofWeek[8] = {"", "Sunday" ,"Monday","Tuesday", "Wednesday", "Thursday", "Friday"," Saturday"};
    decodedMsg = String(dayofWeek[dateTime.dayofWeek]) + " " + String(dateTime.day) + "-" + String(dateTime.month) + "-" + String(dateTime.year);
    scroll();
    delay(100);
}
  // Show Temperature and Humidity with Button 1 Click
  else if(button1HeldTime >= 100){
      dhtTempprint();
      delay(100);
}
  button1HeldTime = 0;

// Button 2 Functions
  while (digitalRead(button2)==LOW && button2HeldTime<1000){
    delay(100);
    button2HeldTime = button2HeldTime + 100;
  }
  // Set the alarm with Button 2 long press and then both buttons click
  if (button2HeldTime >= 1000){    
    alarm();
    delay(100);
  }
  // Show alarm Status and Time with Button 2 click
   else if(button2HeldTime >= 100){
      alarmState = !alarmState;
      if (alarmState == 1){
          alarmStatus = "ON ";
          decodedMsg = "Alarm " + alarmStatus + alarmHour;
      }
      else{ alarmStatus = "OFF ";
            decodedMsg = "Alarm " + alarmStatus;
      }
      Serial.println(decodedMsg);      
      scroll();
      delay(100);
}
  button2HeldTime = 0;
  // Check if alarm is ON and alarm time is the same as current hour
  alarmBuzzer();
}
