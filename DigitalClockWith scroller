#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Max72xxPanel.h>
#include <NTPtimeESP.h> 
#include <DHT.h>

#define DHTTYPE DHT11 
//#define SSID "****" // Home SSID
//#define PASS "****" // HOME PASS
#define SSID "****" // insert your SSID
#define PASS "****" // insert your password

// ******************* String form to sent to the client-browser ************************************
String form =
"<p>"
"<center>"
"<h1>ESP8266 Web Server</h1>"
"<form action='msg'><p>Type your message <input type='text' name='msg' size=100 autofocus> <input type='submit' value='Submit'></form>"
"</center>";

ESP8266WebServer server(80); // HTTP server will listen at port 80

long period;
int offset=1,refresh=0;
int pinCS = D3; // Attach CS to this pin, DIN to MOSI and CLK to SCK (cf http://arduino.cc/en/Reference/SPI )
int numberOfHorizontalDisplays = 4;
int numberOfVerticalDisplays = 1;
String decodedMsg;
Max72xxPanel matrix = Max72xxPanel(pinCS, numberOfHorizontalDisplays, numberOfVerticalDisplays);

int DHTPin = D2; // Temp/Hum sensor
int button = D4; // Button dahhhh
int sensor = A0; // Lightresistor
int val = 0; // Variable from button
int light = 0; // Sensor values
int setInt = 0, newInt = 0; // Intensity variable to screens
int temp = 0, hum= 0;
String hour;
String tape = "Arduino";

int wait = 250; // In milliseconds
int clockArray[5]={0,8,13,19,27}; //Position on the matrix for the 5 elements
int spacer = 2;
int width = 5 + spacer; // The font width is 5 pixels

static char celsiusTemp[7], humidityTemp[7];

unsigned long previousMillis = 0, spreviousMillis = 0, tpreviousMillis = 0;

long FastUpdate = 500, SlowUpdate = 60000;

DHT dht(DHTPin, DHTTYPE); // Temp/Hum
NTPtime NTPch("gb.pool.ntp.org"); // NTP Great Britain Poool

strDateTime dateTime;

/*
handles the messages coming from the webbrowser, restores a few special characters and 
constructs the strings that can be sent to the oled display
*/
void handle_msg() {

matrix.fillScreen(LOW);
server.send(200, "text/html", form); // Send same page so they can send another msg
refresh=1;
// Display msg on Oled
String msg = server.arg("msg");
Serial.println(msg);
decodedMsg = msg;
// Restore special characters that are misformed to %char by the client browser
decodedMsg.replace("+", " "); 
decodedMsg.replace("%21", "!"); 
decodedMsg.replace("%22", ""); 
decodedMsg.replace("%23", "#");
decodedMsg.replace("%24", "$");
decodedMsg.replace("%25", "%"); 
decodedMsg.replace("%26", "&");
decodedMsg.replace("%27", "'"); 
decodedMsg.replace("%28", "(");
decodedMsg.replace("%29", ")");
decodedMsg.replace("%2A", "*");
decodedMsg.replace("%2B", "+"); 
decodedMsg.replace("%2C", ","); 
decodedMsg.replace("%2F", "/"); 
decodedMsg.replace("%3A", ":"); 
decodedMsg.replace("%3B", ";"); 
decodedMsg.replace("%3C", "<"); 
decodedMsg.replace("%3D", "="); 
decodedMsg.replace("%3E", ">");
decodedMsg.replace("%3F", "?"); 
decodedMsg.replace("%40", "@"); 
//Serial.println(decodedMsg); // print original string to monitor



//Serial.println(' '); // new line in monitor
}


void getNTPtime(){

dateTime = NTPch.getNTPtime(0, 1); // first parameter: Time zone in floating point (for India); second parameter: 1 for European summer time
NTPch.printDateTime(dateTime);

String actualHour = String (dateTime.hour);
String actualMinute = String (dateTime.minute);
String actualsecond = String (dateTime.second);
String actualyear = String (dateTime.year);
String actualMonth = String (dateTime.month);
String actualday = String (dateTime.day);
String actualdayofWeek = String (dateTime.dayofWeek);

if (actualMinute.length() <2){ // actualMinute only shows one digit when < 10
actualMinute= "0" + actualMinute; 
} 
hour= actualHour + ":" + actualMinute; 
Serial.print(hour);
}
void clockToMatrix(){
matrix.fillScreen(LOW); 
matrix.drawChar(clockArray[0], 1, hour[0], HIGH, LOW, 1);
matrix.drawChar(clockArray[1], 1, hour[1], HIGH, LOW, 1);
matrix.drawChar(clockArray[2], 1, hour[2], HIGH, LOW, 1);
matrix.drawChar(clockArray[3], 1, hour[3], HIGH, LOW, 1);
matrix.drawChar(clockArray[4], 1, hour[4], HIGH, LOW, 1);
matrix.write(); // Send bitmap to display
delay(100);
/*
* matrix.fillScreen(LOW);
int index = o;
* for(index=0;index<4;index++){
* matrix.drawChar(clockArray[index], 1, hour[index], HIGH, LOW, 1);
* }
* matrix.Write();
* delay(100);
*/
}

void scroll(){
for ( int i = 0 ; i < width * decodedMsg.length() + matrix.width() - spacer; i++ ) {
server.handleClient(); // checks for incoming messages
if (refresh==1) i=0;
refresh=0;
matrix.fillScreen(LOW);

int letter = i / width;
int x = (matrix.width() - 1) - i % width;
int y = (matrix.height() - 8) / 2; // center the text vertically 

while ( x + width - spacer >= 0 && letter >= 0 ) {
if ( letter < decodedMsg.length() ) {
matrix.drawChar(x, y, decodedMsg[letter], HIGH, LOW, 1);
}
letter--;
x -= width;
}
matrix.write(); // Send bitmap to display
delay(wait);
}
}

void setup(void) {

pinMode(button, INPUT_PULLUP);
pinMode(sensor, INPUT);
dht.begin();
matrix.setIntensity(4); // Use a value between 0 and 15 for brightness

// matrix.setPosition(0, 1, 0); // The first display is at <0, 0>
// matrix.setPosition(1, 0, 0); // The second display is at <1, 0>
matrix.setRotation(0,3);
matrix.setPosition(0, 3, 0); // The first display is at <0, 3>
matrix.setRotation(1,3);
matrix.setPosition(1, 2, 0); // The second display is at <1, 2>
matrix.setRotation(2,3);
matrix.setPosition(2, 1, 0); // The third display is at <2, 1>
matrix.setRotation(3,3);
matrix.setPosition(3, 0, 0); // And the last display is at <3, 0>

Serial.begin(115200); // full speed to monitor

WiFi.begin(SSID, PASS); // Connect to WiFi network
while (WiFi.status() != WL_CONNECTED) { // Wait for connection
delay(500);
Serial.println(".");
}
// Set up the endpoints for HTTP server, Endpoints can be written as inline functions:
server.on("/", []() {
server.send(200, "text/html", form);
});
server.on("/msg", handle_msg); // And as regular external functions:
server.begin(); // Start the server 


Serial.print("SSID: "); // prints SSID in monitor
Serial.println(SSID); // to monitor 

char result[16];
sprintf(result, "%3d.%3d.%1d.%3d", WiFi.localIP()[0], WiFi.localIP()[1], WiFi.localIP()[2], WiFi.localIP()[3]);
Serial.println();
Serial.println(result);
decodedMsg = result;
Serial.println("WebServer ready! ");

Serial.println(WiFi.localIP()); // Serial monitor prints localIP 
}

void loop(void) {

unsigned long currentMillis = millis();
unsigned long scurrentMillis = millis(); // Counter for light sensor

// Start the Light Sensor functions
if (scurrentMillis - spreviousMillis >= 500){
light = analogRead(A0); // Read Photoresistor level
light = map(light, 0,1023,0,10); // Change Values to handle
newInt = 10-light; // New Intensity -10 sets the new Int to matrix 1-Low 15-Full
if (newInt < setInt){ // Read the changes and set intensity
for (int x = setInt ; newInt < setInt ; x--){
setInt = newInt;
}}
if (newInt > setInt){
for(int x = setInt ; newInt > setInt ; x++){
setInt=newInt; 
}}

else{ setInt = newInt;
} 
matrix.setIntensity(setInt);
spreviousMillis = scurrentMillis; 
} 
// Get the NTP Functions
if (currentMillis - previousMillis >= SlowUpdate){
getNTPtime();
previousMillis = currentMillis; 
}
// Show clock on matrix
clockToMatrix();
delay(100);
}

