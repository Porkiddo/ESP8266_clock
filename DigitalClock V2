#include <LedControl.h>
#include <ESP8266WiFi.h>
#include <NTPtimeESP.h> 
#include <DHT.h>

const int DIN_PIN = D7;
const int CS_PIN = D3;
const int CLK_PIN = D5;

LedControl display = LedControl(DIN_PIN, CLK_PIN, CS_PIN,4);

int DHTPin = D2;                          // Temp/Hum sensor
int button = D4;                          // Button dahhhh
int sensor = A0;                          // Lightresistor
int val = 0;                              // Variable from button
int light = 0;                            // Sensor values
int setInt = 0;                           // Intensity variable to screens
int newInt = 0;
int temp = 0;
int hum= 0;

int actualHour      = 0;                  // NTP variables
int actualMinute    = 0;
int actualsecond    = 0;
int actualyear      = 0;
int actualMonth     = 0;
int actualday       = 0;
int actualdayofWeek = 0;

#define DHTTYPE DHT11                      // DHT11 Temperature/Humidity Sensor
//#define SSID "***"         // WORK
//#define PASS "***"                // WORK
#define SSID "***"                    // Home SSID
#define PASS "***"                    // HOME PASS

static char celsiusTemp[7];
static char humidityTemp[7];

unsigned long previousMillis = 0;
unsigned long spreviousMillis = 0;
unsigned long tpreviousMillis = 0;

long FastUpdate = 500;
long SlowUpdate = 60000;

DHT dht(DHTPin, DHTTYPE);                  // Temp/Hum
NTPtime NTPch("gb.pool.ntp.org");          // NTP Great Britain Poool

strDateTime dateTime;

const uint64_t IMAGES[] = {
  0x3c66666e76663c00, // 0
  0x7e1818181c181800, // 1
  0x7e060c3060663c00, // 2
  0x3c66603860663c00, // 3
  0x30307e3234383000, // 4
  0x3c6660603e067e00, // 5 
  0x3c66663e06663c00, // 6
  0x1818183030667e00, // 7
  0x3c66663c66663c00, // 8
  0x3c66607c66663c00, // 9
};
const int IMAGES_LEN = sizeof(IMAGES)/8;

const uint64_t IMAGES2[] = {
  0x183c7effffff6600,
  0xe7c38100000099ff,
  0x003c424242423c00,
  0x003c7e7e7e7e3c00,
  0xffc381818181c3ff,
  0xffc3bdbdbdbdc3ff,
  0xffffff7e3c181800,
  0x00000081c3e7e7ff,
  0x0000000006090906, // graus
  0x60660c1830660600, // %
  0x0000000000000000 // clear
};
const int IMAGES2_LEN = sizeof(IMAGES2)/8;

void displayImage3(uint64_t image) {
  for (int i = 0; i < 8; i++) {
    byte row = (image >> i * 8) & 0xFF;
    for (int j = 0; j < 8; j++) {
      display.setLed(0, i, j, bitRead(row, j));
    }
  }
}
void displayImage2(uint64_t image) {
    for (int i = 0; i < 8; i++) {
    byte row = (image >> i * 8) & 0xFF;
    for (int j = 0; j < 8; j++) {
      display.setLed(1, i, j, bitRead(row, j));
    }
  }
  }
void displayImage1(uint64_t image) {
  for (int i = 0; i < 8; i++) {
    byte row = (image >> i * 8) & 0xFF;
    for (int j = 0; j < 8; j++) {
      display.setLed(2, i, j, bitRead(row, j));
    }
  }
  }
void displayImage0(uint64_t image) {
  for (int i = 0; i < 8; i++) {
    byte row = (image >> i * 8) & 0xFF;
    for (int j = 0; j < 8; j++) {
      display.setLed(3, i, j, bitRead(row, j));
    }
  }
}

void getNTPtime(){
  dateTime = NTPch.getNTPtime(0, 1); // first parameter: Time zone in floating point (for India); second parameter: 1 for European summer time
    NTPch.printDateTime(dateTime);
    
   actualHour      = int(dateTime.hour);
   actualMinute    = int(dateTime.minute);
   actualsecond    = int(dateTime.second);
   actualyear      = int(dateTime.year);
   actualMonth     = int(dateTime.month);
   actualday       = int(dateTime.day);
   actualdayofWeek = int(dateTime.dayofWeek);
}

void sendTimeToMatrix(){
   uint8_t ones,tens;            //Separate digits from hours
      tens = actualHour/10;
      ones = actualHour-tens*10;
      int h1 = tens;
      displayImage0(IMAGES[h1]);    //print to matrix 1
      int h2 = ones;
      displayImage1(IMAGES[h2]);    //print to matrix 2
    
      uint8_t mones,mtens;          //Separate digits from minutes
      mtens = actualMinute/10;
      mones = actualMinute-mtens*10;  
      int m1 = mtens;
      displayImage2(IMAGES[m1]);    //print to matrix 3
      int m2 = mones;
      displayImage3(IMAGES[m2]);    //print to matrix 4
}
void setup() {
  
  pinMode(button, INPUT_PULLUP);
  pinMode(sensor, INPUT);
  dht.begin();
  
  for(int index=0;index<display.getDeviceCount();index++)
  { 
    display.setIntensity(index,4);
    display.shutdown(index,false);
    display.clearDisplay(index);
   }
   
  Serial.begin(115200);                           // full speed to monitor
                               
  WiFi.begin(SSID, PASS);                         // Connect to WiFi network
  while (WiFi.status() != WL_CONNECTED) {         // Wait for connection
    delay(500);
    Serial.print(".");
    displayImage3(IMAGES2[1]);                    // Shows heart beat while connecting
    delay(100);
    displayImage3(IMAGES2[0]);
    delay(100);
    }
  Serial.println();
  Serial.print("SSID : ");                        // prints SSID in monitor
  Serial.println(SSID);                           // to monitor             
  Serial.println(WiFi.localIP());                 // Serial monitor prints localIP
  Serial.println("Connected!");
  displayImage3(IMAGES2[2]);                      // Show circules while pulling NTP
  displayImage2(IMAGES2[2]);
  displayImage1(IMAGES2[2]);
  displayImage0(IMAGES2[2]);
  delay(500);
}

void loop() {
    
    unsigned long currentMillis = millis();            // Counter for NTP
    unsigned long scurrentMillis = millis();           // Counter for light sensor
    unsigned long tcurrentMillis = millis();

// Start the NTP Functions
  if (currentMillis - previousMillis >= SlowUpdate){
     getNTPtime();
     previousMillis = currentMillis; 
}
 
// Start the Light Sensor functions
   if (scurrentMillis - spreviousMillis >= 500){
      light = analogRead(sensor);                      // Read Photoresistor level
      light = map(light, 0,1023,0,10);                 // Change Values to handle
      newInt = 10-light;                               // New Intensity -10 sets the new Int to matrix 1-Low 15-Full
      if (newInt < setInt){                            // Read the changes and set intensity
         for (int x = setInt ; newInt < setInt ; x--){
         setInt = newInt;
       }}
       if (newInt > setInt){
          for(int x = setInt ; newInt > setInt ; x++){
          setInt=newInt;        
       }}
        else{ setInt = newInt;
        }        
      for(int index=0;index<display.getDeviceCount();index++) // Send intensity to the matrix 
          { 
           display.setIntensity(index,setInt);
      }
  spreviousMillis = scurrentMillis; 
 }
   
// Start the Temperature and Humidity Functions
    if (tcurrentMillis - tpreviousMillis >= 60000){
        float h = dht.readHumidity();
           
            float t = dht.readTemperature();           // Read temperature as Celsius (the default)
            
            if (isnan(h) || isnan(t)) {                // Check if any reads failed and exit early (to try again).
              Serial.println("Failed to read from DHT sensor!");
              strcpy(celsiusTemp,"Failed");
              strcpy(humidityTemp, "Failed");         
            }
            else{
              float hic = dht.computeHeatIndex(t, h, false);  // Computes temperature values in Celsius + Fahrenheit and Humidity 
              dtostrf(hic, 6, 2, celsiusTemp);             
/*
              Serial.print("Humidity: ");
              Serial.println(h);
              Serial.println(" %\t Temperature: ");
              Serial.print(t);
              Serial.println(" *C ");*/
              temp=t;
              hum=h;
            }
              tpreviousMillis = tcurrentMillis;
    }
      uint8_t tones,ttens;            //Separate digits from hours
      ttens = temp/10;
      tones = temp-ttens*10;
      int t1 = ttens;     
      int t2 = tones;  
      uint8_t hones,htens;          //Separate digits from minutes
      htens = hum/10;
      hones = hum-htens*10;  
      int hu1 = htens;
      int hu2 = hones;

// Button Functions
  val = digitalRead(button);      // If button pressed show something else for half second
  if(val == LOW){   
     displayImage0(IMAGES2[10]);
     displayImage1(IMAGES[t1]);    //print to matrix 1
     displayImage2(IMAGES[t2]);    //print to matrix 2
     displayImage3(IMAGES2[8]);
     delay(2000);
     displayImage0(IMAGES2[10]);
     displayImage1(IMAGES[hu1]);    //print to matrix 3
     displayImage2(IMAGES[hu2]);    //print to matrix 4
     displayImage3(IMAGES2[9]);
     delay(2000);
  }
  else {
      sendTimeToMatrix();
  }
}
